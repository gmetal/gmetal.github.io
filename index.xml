<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gmetal&#39;s dev blog</title>
    <link>https://gmetal.dev/</link>
    <description>Recent content on gmetal&#39;s dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 08:00:00 +0000</lastBuildDate><atom:link href="https://gmetal.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Avoid Long Apply in Variable Initialisations</title>
      <link>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</link>
      <pubDate>Tue, 18 Jan 2022 08:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</guid>
      <description>The apply scope function is a very useful Kotlin standard library method for grouping long variable configuration blocks, when no builder is available. It can be used when creating functions that return the instance of the object (in a builder like fashion), like in the following code:
class MyClass { fun func(): MyClass = apply { // add code here  } } Moreover, it is especially convenient when using older APIs which do not provide a builder.</description>
    </item>
    
    <item>
      <title>Unit Testing WithTimeout in Coroutines With Kotest</title>
      <link>https://gmetal.dev/posts/unit-testing-withtimeout-with-kotest/</link>
      <pubDate>Wed, 03 Nov 2021 08:01:49 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/unit-testing-withtimeout-with-kotest/</guid>
      <description>Sometimes you may be required to implement code that executes periodic actions. In Java, you can implement such a feature using a Timer. Kotlin also provided a wrapper for this, using the fixedRateTimer function. The above mentioned method of creating a timer is old-style, thread-based and JVM specific. Coroutines offer a better solution for solving this problem, in a more lightweight, efficient and cross-platform manner. One such more-kotlin styled approach, is provided by the ticker, which is part of the Channels API.</description>
    </item>
    
    <item>
      <title>Using kotest in your Android project</title>
      <link>https://gmetal.dev/posts/using-kotest/</link>
      <pubDate>Sat, 28 Aug 2021 16:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/using-kotest/</guid>
      <description>Android Studio Unit Testing Support by compscigrad is licensed under CC BY-NC-SA 2.0
  Kotest is a Kotlin multiplatform testing framework and assertions library. It is a powerful framework, that can completely replace the default kotlin test framework, which is based on the popular JUnit and TestNG. Furthermore, Kotest supports some more advanced features, such as property-based testing and its own assertions framework.
An interesting question may be why would anyone use kotest over the standard, popular JUnit (for example) framework?</description>
    </item>
    
    <item>
      <title>Metador - the HTML metadata retriever library</title>
      <link>https://gmetal.dev/projects/metador/</link>
      <pubDate>Mon, 21 Jun 2021 17:34:13 +0000</pubDate>
      
      <guid>https://gmetal.dev/projects/metador/</guid>
      <description>Metador is an easy to use library for retrieving the META tags of an HTML page, for use in an Android mobile application. It can be used in scenarios where the developer would have to extract the information from a list of HTML pages. HTML metadata may contain very useful information, such as a title, a text summary, an associated image, etc.
To use Metador, you create a Metador object through the associated Metador.</description>
    </item>
    
    <item>
      <title>Adding documentation to a kotlin project with Dokka </title>
      <link>https://gmetal.dev/posts/add-documentation-with-dokka/</link>
      <pubDate>Mon, 21 Jun 2021 06:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/add-documentation-with-dokka/</guid>
      <description>Library by Geoff Coupe, licensed under CC BY-NC-SA 2.0
  Dokka is for kotlin what Javadoc is for Java. It converts your KDoc-styled comments into a variety of document format such as HTML, Markdown (Github and Jekyll forms) and Javadoc HTML.
How to add dokka to your gradle project Adding dokka to your Gradle project is very easy, as discussed in their documentation. You just add the dokka plugin to the plugins block of your module&amp;rsquo;s build gradle (not the root build.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://gmetal.dev/about/</link>
      <pubDate>Thu, 13 May 2021 13:48:10 +0000</pubDate>
      
      <guid>https://gmetal.dev/about/</guid>
      <description>My name is George Metaxas and I am an Android Software Engineer. I have been working with Android since 2012, initially as a hobby and since mid-2014 professionally. I am currently employed at Bespot. I have been an enthusiastic, long time Linux user, with Gentoo Linux still being my distribution of choice (although lately I have also been trying out Arch Linux).
I have previously worked as a backend software engineer / devops engineer at OTE Group of companies between 2011 and 2014.</description>
    </item>
    
  </channel>
</rss>
