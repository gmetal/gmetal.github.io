<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on gmetal&#39;s dev blog</title>
    <link>https://gmetal.dev/tags/kotlin/</link>
    <description>Recent content in kotlin on gmetal&#39;s dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 08:00:00 +0000</lastBuildDate><atom:link href="https://gmetal.dev/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Avoid Long Apply in Variable Initialisations</title>
      <link>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</link>
      <pubDate>Tue, 18 Jan 2022 08:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</guid>
      <description>The apply scope function is a very useful Kotlin standard library method for grouping long variable configuration blocks, when no builder is available. It can be used when creating functions that return the instance of the object (in a builder like fashion), like in the following code:
class MyClass { fun func(): MyClass = apply { // add code here  } } Moreover, it is especially convenient when using older APIs which do not provide a builder.</description>
    </item>
    
    <item>
      <title>Using kotest in your Android project</title>
      <link>https://gmetal.dev/posts/using-kotest/</link>
      <pubDate>Sat, 28 Aug 2021 16:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/using-kotest/</guid>
      <description>Android Studio Unit Testing Support by compscigrad is licensed under CC BY-NC-SA 2.0
  Kotest is a Kotlin multiplatform testing framework and assertions library. It is a powerful framework, that can completely replace the default kotlin test framework, which is based on the popular JUnit and TestNG. Furthermore, Kotest supports some more advanced features, such as property-based testing and its own assertions framework.
An interesting question may be why would anyone use kotest over the standard, popular JUnit (for example) framework?</description>
    </item>
    
    <item>
      <title>Adding documentation to a kotlin project with Dokka </title>
      <link>https://gmetal.dev/posts/add-documentation-with-dokka/</link>
      <pubDate>Mon, 21 Jun 2021 06:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/add-documentation-with-dokka/</guid>
      <description>Library by Geoff Coupe, licensed under CC BY-NC-SA 2.0
  Dokka is for kotlin what Javadoc is for Java. It converts your KDoc-styled comments into a variety of document format such as HTML, Markdown (Github and Jekyll forms) and Javadoc HTML.
How to add dokka to your gradle project Adding dokka to your Gradle project is very easy, as discussed in their documentation. You just add the dokka plugin to the plugins block of your module&amp;rsquo;s build gradle (not the root build.</description>
    </item>
    
  </channel>
</rss>
