<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>best practices on gmetal&#39;s dev blog</title>
    <link>https://gmetal.dev/tags/best-practices/</link>
    <description>Recent content in best practices on gmetal&#39;s dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 08:00:00 +0000</lastBuildDate><atom:link href="https://gmetal.dev/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Avoid Long Apply in Variable Initialisations</title>
      <link>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</link>
      <pubDate>Tue, 18 Jan 2022 08:00:00 +0000</pubDate>
      
      <guid>https://gmetal.dev/posts/avoid-long-apply-in-variable-init/</guid>
      <description>The apply scope function is a very useful Kotlin standard library method for grouping long variable configuration blocks, when no builder is available. It can be used when creating functions that return the instance of the object (in a builder like fashion), like in the following code:
class MyClass { fun func(): MyClass = apply { // add code here  } } Moreover, it is especially convenient when using older APIs which do not provide a builder.</description>
    </item>
    
  </channel>
</rss>
